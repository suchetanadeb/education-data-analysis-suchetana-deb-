{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "251bf1fe-61b9-4144-9590-20b0ba3e9529",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import python libraries\n",
    "\n",
    "import numpy as np \n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5aeed5f4-e0c6-4a9a-bbec-3bcdb86f2906",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Assuming your Excel file is named \"student_data.xlsx\" and located in \"D:\\\\\"\n",
    "df = pd.read_excel(\"D:\\\\student data project.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "41a3e74f-b543-40de-bb77-6dc1d113c172",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(106, 7)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "eb18098f-5977-4921-8a69-0ab42d2b0174",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Student ID</th>\n",
       "      <th>Name</th>\n",
       "      <th>Age</th>\n",
       "      <th>Grade</th>\n",
       "      <th>Major</th>\n",
       "      <th>GPA</th>\n",
       "      <th>City</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Paula Singh</td>\n",
       "      <td>23</td>\n",
       "      <td>B</td>\n",
       "      <td>Biology</td>\n",
       "      <td>2.52</td>\n",
       "      <td>LUS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Louis Robinson</td>\n",
       "      <td>21</td>\n",
       "      <td>A</td>\n",
       "      <td>English</td>\n",
       "      <td>3.66</td>\n",
       "      <td>KQK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Nora Krueger</td>\n",
       "      <td>18</td>\n",
       "      <td>B</td>\n",
       "      <td>English</td>\n",
       "      <td>3.95</td>\n",
       "      <td>EPV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Jones Myers</td>\n",
       "      <td>19</td>\n",
       "      <td>C</td>\n",
       "      <td>Mathematics</td>\n",
       "      <td>3.94</td>\n",
       "      <td>CUR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Lydia Leon</td>\n",
       "      <td>21</td>\n",
       "      <td>D</td>\n",
       "      <td>Mathematics</td>\n",
       "      <td>3.43</td>\n",
       "      <td>AER</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Student ID            Name  Age Grade        Major   GPA City\n",
       "0           1     Paula Singh   23     B      Biology  2.52  LUS\n",
       "1           2  Louis Robinson   21     A      English  3.66  KQK\n",
       "2           3    Nora Krueger   18     B      English  3.95  EPV\n",
       "3           4     Jones Myers   19     C  Mathematics  3.94  CUR\n",
       "4           5      Lydia Leon   21     D  Mathematics  3.43  AER"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a534bcba-b31c-4f6d-a828-505df0252d1f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 106 entries, 0 to 105\n",
      "Data columns (total 7 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   Student ID  106 non-null    int64  \n",
      " 1   Name        105 non-null    object \n",
      " 2   Age         106 non-null    int64  \n",
      " 3   Grade       105 non-null    object \n",
      " 4   Major       105 non-null    object \n",
      " 5   GPA         106 non-null    float64\n",
      " 6   City        105 non-null    object \n",
      "dtypes: float64(1), int64(2), object(4)\n",
      "memory usage: 5.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6ebf1334-24b2-4168-a07d-25351e4a4918",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duplicate Rows:\n",
      "     Student ID            Name  Age Grade    Major   GPA City\n",
      "100          99  Vivian Aguirre   19     C  History  2.98  TFB\n",
      "101         100   Andy Espinoza   18     F  Biology  3.56  WFJ\n",
      "102          99  Vivian Aguirre   19     C  History  2.98  TFB\n",
      "103         100   Andy Espinoza   18     F  Biology  3.56  WFJ\n",
      "104          99  Vivian Aguirre   19     C  History  2.98  TFB\n",
      "105         100   Andy Espinoza   18     F  Biology  3.56  WFJ\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Assuming df is your DataFrame\n",
    "# Check for duplicate rows\n",
    "duplicate_rows = df[df.duplicated()]\n",
    "\n",
    "# Print duplicate rows\n",
    "print(\"Duplicate Rows:\")\n",
    "print(duplicate_rows)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "84ff5d2b-c301-4a1b-a507-8cd2be802a67",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Largest 2 values: [3.56, 2.98]\n"
     ]
    }
   ],
   "source": [
    "import heapq\n",
    "\n",
    "numbers = [2.98, 3.56, 2.98, ]\n",
    "\n",
    "# Find the largest 2 elements\n",
    "largest_values = heapq.nlargest(2, numbers)\n",
    "print(\"Largest 2 values:\", largest_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "33c82378-ac73-4ef0-8fb4-ad080b9c7681",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Smallest 2 values: [2.98, 2.98]\n"
     ]
    }
   ],
   "source": [
    "import heapq\n",
    "\n",
    "numbers = [2.98, 3.56, 2.98, ]\n",
    "\n",
    "# Find the smallest 2 elements\n",
    "smallest_values = heapq.nsmallest(2, numbers)\n",
    "print(\"Smallest 2 values:\", smallest_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c03caac1-a2d5-40a3-ba43-991b1591438d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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TZviy1/+cpRS4rvf/W5cf/31cfXVV0d/f3/09/fHZZddNqzr9vX1RVdXV9x8882xbdu2uPzyy+Ouu+6qG7N58+a48cYbY+nSpbF9+/b4yU9+Er29vbFy5cq6cT09PXH99dfHH//4x5g/f34sWrQo/vGPf0RbW1v86le/ioiInTt3Rn9/f9x7773Dmt/DDz8c3d3dsWrVqtiyZUtMmjQp7r///mGdC5xEBeA4vPDCCyUiyu7du4/4+uLFi8uCBQvqjj377LMlIsq+fftqx7Zu3Voiorz66qullFJuuOGGMn/+/LrzFi5cWKrVam3/iiuuKKtWraob87Of/axMmjSpth8R5fbbb6/t79+/v0REefLJJ991Lkeyfv36unt3dHSUm266qW7MvHnzysyZM496HeDk8sQGOC4zZ86MK664ImbMmBFf/epXY+3atbFv377jvu6OHTti3rx5dcc6Ojrq9l988cVYsWJFNDc317ZvfOMb0d/fH//85z9r4z75yU/W/j1hwoRobW2NN95446TPD3j/CRvguJxxxhnxzDPPxJNPPhmf+MQn4r777otLLrkkXn311Xc9p6Hhv//1lP/5iy4HDx4c8b33798fPT09sW3bttr2pz/9Kf7617/GuHHjauPGjBlTd16lUolDhw6N+H7AB5+wAY5bpVKJzs7O6Onpia1bt8bYsWNj48aNERExduzY+M9//lM3/pxzzomI/67Pece2bdvqxkyfPj36+vrqjj3//PN1+5deemns3Lkzpk6detj2Tjy9l7Fjx0ZEHDbH9zKc+QHvP1/3Bo5LX19f/PrXv44vfOELce6550ZfX1/87W9/i+nTp0dExIUXXhhPP/107Ny5M84666yoVqsxderUaGtri+7u7li5cmXs2rUr1qxZU3fdW265JTo7O2P16tWxYMGCePrpp+Opp56qG3PHHXfENddcExdccEF85StfiYaGhnjxxRfjz3/+82ELjd/NlClTolKpxOOPPx7z58+PpqamaG5ufs/zli5dGkuWLIk5c+ZEZ2dnbNiwIV566aVob28f5k8OOClGe5EPcGrbvn17ueqqq8o555xTGhsby8UXX1zuu+++2utvvPFG+fznP1+am5tLRJRnn322lFLKb37zmzJjxowybty48pnPfKY88sgjdYuHSynlgQceKOeff35pamoqX/ziF8vq1avrFvCWUspTTz1VLrvsstLU1FRaW1vL3Llzy09/+tPa6xFRNm7cWHdOtVot69evr+2vWLGinHfeeaVSqZTFixcf8X3+/8XDpZSycuXKcvbZZ5fm5uayePHictttt1k8DKOsUsr//JIbAOAUZo0NAJCGsAEA0hA2AEAawgYASEPYAABpCBsAIA1hAwCkIWwAgDSEDQCQhrABANIQNgBAGsIGAEjj/wDRe1HYpJHxGgAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "# Sample data\n",
    "x = ['student id']\n",
    "y = ['grade']\n",
    "\n",
    "# Plot the data\n",
    "sns.lineplot(x=x, y=y)\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1cec6449-3165-4da5-9199-2a58d08b4201",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Sample data\n",
    "x = ['student id']\n",
    "y = ['grade']\n",
    "\n",
    "# Create a plot\n",
    "plt.plot(x, y)\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('X-axis label')\n",
    "plt.ylabel('Y-axis label')\n",
    "plt.title('Sample Plot')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "be54194f-2d3a-4ead-9944-152f2652f8a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Sample data\n",
    "sizes = [10, 20, 30, 40, 50]\n",
    "labels = ['biology', 'computer science', 'history', 'mathematics', 'english']\n",
    "colors = ['red', 'green', 'blue', 'yellow', 'orange']\n",
    "explode = (0, 0.1, 0, 0, 0)  # \"explode\" the 2nd slice (B)\n",
    "\n",
    "# Create a pie chart with customization\n",
    "plt.pie(sizes, labels=labels, colors=colors, explode=explode, autopct='%1.1f%%', startangle=90)\n",
    "\n",
    "# Add title\n",
    "plt.title('city wise student count')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab6c85c4-1544-42a4-a910-4c92df1c7e2b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
